require 'syntax'

/* ELite supports "duck typed monad", that is, any class that implements
 * "bind" operation is a monad type.
 */

abstract class Monad
{
    abstract bind(k);

    define ->>(f) => bind(f);
    define >> (m) => bind(\_ => m);
}


//-----------------
// The Maybe Monad
//-----------------

@data Maybe = Nothing  { bind(k) => Nothing() }
            | Just(x)  { bind(k) => k(x)      }
extends Monad
{
    static yield(x) => Just(x)
}


// Maybe Monad examples
define mdiv(x, y) => y == 0 ? Nothing() : Just(x / y);

define foo() => mdiv(2, 4) ->> \a =>
                mdiv(2, 0) ->> \b =>
                mdiv(a, b);
print(foo());


//-----------------
// The State Monad
//-----------------

class State(run) extends Monad
{
    bind(k) => State(\s => let ((a, s') = run(s)) run_state(k(a), s'))
    static yield(a) => State(\s => (a, s))
}

define run_state(m, s)  => m.run(s);
define eval_state(m, s) => m.run(s)[0];
define exec_state(m, s) => m.run(s)[1];

define get    =  State(\s => (s, s))
define put(s) => State(\_ => ((), s))


// State Monad examples
define fib(n) {
    define fib_s = do {
        (n, a, b) <- get;
        n == 1 ? State.yield(a)
               : (put((n-1, b, a+b)) >> fib_s);
    }
    eval_state(fib_s, (n,1,1));
}

print(fib(12))


//------------------
// Lists are monads
//------------------

define pyth(n) => do {
    a <- [1..n];
    b <- [a..n];
    c <- [b..n];
    [(a,b,c)] if a^2+b^2==c^2;
}

print(pyth(10))


//--------------
// Continuation
//--------------
// ELite has builtin support for continuation monad.

define calculate_length(l) => yield(l.length());
define double(n) => yield(n*2);
run_cont(calculate_length("123") ->> double, print);

define whats_your_name(name) =>
    call_cc(\exit => do {
        validate_name(name, exit)
        yield("Welcome, ${name}!")
    })

define validate_name(name, exit) =>
    empty name ? exit("You forget to tell me your name!") : yield(null);

run_cont(whats_your_name("bob"), print);
run_cont(whats_your_name(""), print);

define generator(next)() {
    define c = call_cc(\k => c = k(0)) >> next()
    c.run()
}

define fib_generator() {
    let (a = 0, b = 1) {
        generator() {
            (a, b) = (b, a+b)
            yield(a)
        }
    }
}

// try next_fib() multiple times to generate fibonacci sequence
define next_fib = fib_generator()
