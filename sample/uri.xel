/* This example demonstrates a complex lexical analyzer */

/*
  BNF for URI

  URI-reference = [ absoluteURI | relativeURI ] [ "#" fragment ]
  absoluteURI   = scheme ":" ( hier_part | opaque_part )
  relativeURI   = ( net_path | abs_path | rel_path ) [ "?" query ]

  hier_part     = ( net_path | abs_path ) [ "?" query ]
  opaque_part   = uric_no_slash *uric

  uric_no_slash = unreserved | escaped | ";" | "?" | ":" | "@" |
                  "&" | "=" | "+" | "$" | ","

  net_path      = "//" authority [ abs_path ]
  abs_path      = "/"  path_segments
  rel_path      = rel_segment [ abs_path ]

  rel_segment   = 1*( unreserved | escaped |
                      ";" | "@" | "&" | "=" | "+" | "$" | "," )

  scheme        = alpha *( alpha | digit | "+" | "-" | "." )

  authority     = server | reg_name

  reg_name      = 1*( unreserved | escaped | "$" | "," |
                      ";" | ":" | "@" | "&" | "=" | "+" )

  server        = [ [ userinfo "@" ] hostport ]
  userinfo      = *( unreserved | escaped |
                     ";" | ":" | "&" | "=" | "+" | "$" | "," )

  hostport      = host [ ":" port ]
  host          = hostname | IPv4address
  hostname      = *( domainlabel "." ) toplabel [ "." ]
  domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum
  toplabel      = alpha | alpha *( alphanum | "-" ) alphanum
  IPv4address   = 1*digit "." 1*digit "." 1*digit "." 1*digit
  port          = *digit

  path          = [ abs_path | opaque_part ]
  path_segments = segment *( "/" segment )
  segment       = *pchar *( ";" param )
  param         = *pchar
  pchar         = unreserved | escaped |
                  ":" | "@" | "&" | "=" | "+" | "$" | ","

  query         = *uric

  fragment      = *uric

  uric          = reserved | unreserved | escaped
  reserved      = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" |
                  "$" | ","
  unreserved    = alphanum | mark
  mark          = "-" | "_" | "." | "!" | "~" | "*" | "'" |
                  "(" | ")"

  escaped       = "%" hex hex
  hex           = digit | "A" | "B" | "C" | "D" | "E" | "F" |
                          "a" | "b" | "c" | "d" | "e" | "f"

  alphanum      = alpha | digit
  alpha         = lowalpha | upalpha

  lowalpha = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
             "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
             "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
  upalpha  = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |
             "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
             "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
  digit    = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
             "8" | "9"
*/

grammar
{
expr    : 'open' URI { print(URI) }
URI     : /{uri_reference}/

%fragment {
uri_reference   '{absolute_uri}|{relative_uri}'
absolute_uri    '{scheme}:({hier_part}|{opaque_part})(#{fragment})?'
relative_uri    '({net_path}|{abs_path}|{rel_path})(\?{query})?(#{fragment})?'

hier_part       '({net_path}|{abs_path})(\?{query})?'
opaque_part     '{uri_no_slash}{uric}*'

uri_no_slash    '{unreserved}|{escaped}|[;?:@&=+$,]'

net_path        '//{authority}{abs_path}?'
abs_path        '/{path_segments}'
rel_path        '{rel_segment}{abs_path}?'

rel_segment     '({unreserved}|{escaped}|[;@&=+$,])+'

scheme          '{alpha}({alpha}|{digit}|[+\-.])*'

authority       '{server}|{reg_name}'

reg_name        '({unreserved}|{escaped}|[$,;:@&=+])+'

server          '(({userinfo}@)?{hostport})?'
userinfo        '({unreserved}|{escaped}|[;:&=+$,])*'

hostport        '{host}(:{port})?'
host            '{hostname}|{IPV4address}'
hostname        '({domainlabel}\.)*{toplabel}\.?'
domainlabel     '{alphanum}|{alphanum}({alphanum}|-)*{alphanum}'
toplabel        '{alpha}|{alpha}({alphanum}|-)*{alphanum}'
IPV4address     '{digit}+\.{digit}+\.{digit}+\.{digit}+'
port            '{digit}*'

path            '({abs_path}|{opaque_part})?'
path_segments   '{segment}(/{segment})*'
segment         '{pchar}*(;{param})*'
param           '{pchar}*'
pchar           '{unreserved}|{escaped}|[:@&=+$,]'

query           '{uric}*'
fragment        '{uric}*'

uric            '{reserved}|{unreserved}|{escaped}'
reserved        '[;/?:@&=+$,]'
unreserved      '{alphanum}|{mark}'
mark            '[\-_.!~*\']'
escaped         '%{hex}{hex}'
hex             '[0-9a-fA-F]'
alphanum        '[a-zA-Z0-9]'
alpha           '[a-zA-Z]'
digit           '[0-9]'
}
}

open ftp://ftp.is.co.za/rfc/rfc1808.txt
open gopher://spinaltap.micro.umn.edu/00/Weather/California/Los%20Angeles
open http://www.math.uio.no/faq/compression-faq/part1.html
open mailto:mduerst@ifi.unizh.ch
open news:comp.infosystems.www.servers.unix
open telnet://melvyl.ucop.edu/
