// 请阅读SICP第3.5节以获得关于流的背景知识

void test_seq(n) {
    define from(n) => [n : &from(n+1)]
    define add_cons(s1, s2) => map2(s1, s2, (+))
    define mul_cons(s1, s2) => map2(s1, s2, (*))
    define scale(s, f) => s.map(\x=>x*f)

    define integers     = from(1)
    define doubles      = [1 : &add_cons(doubles, doubles)]
    define fibs         = [1 : &[1 : &add_cons(fibs.tail, fibs)]]
    define factorials   = [1 : &mul_cons(from(2), factorials)]
    define primes       = [2 : &from(3).filter(is_prime)]

    define is_prime(n) {
        let sieve([x:xs] = primes) {
            x*x>n ? true : n%x==0 ? false : sieve(xs)
        }
    }

    define next(N,x)   => (x + N/x) / 2
    define repeat(f,a) => [a : &repeat(f, f(a))]
    define sqrt(x)     => repeat(next.(x), 1.0)

    // The Pi algorithm based on Gosper's series from the paper
    // "Unbounded Spigot Algorithm for the Digits of Pi",
    // Copyright Mathematical Association of America 2005.
    // author Jeremy Gibbons <jeremy.gibbons@comlab.ox.ac.uk>.
    // http://web.comlab.ox.ac.uk/oucl/work/jeremy.gibbons/publications/spigot.pdf
    define pi =
        let g(q=1,r=180,t=60,i=2)
            let (u = 3*(3*i+1)*(3*i+2), y = (q*(27*i-12)+5*r) div (5*t))
                [y : &g(10*q*i*(2*i-1), 10*u*(q*(5*i-2)+r-y*t), t*u, i+1)]

    print("natural:    ${integers[0..*n]}");
    print("doubles:    ${doubles[0..*n]}");
    print("fibs:       ${fibs[0..*n]}");
    print("factorials: ${factorials[0..*n]}");
    print("primes:     ${primes[0..*n]}");
    print("sqrt(2):    ${sqrt(2)[0..*n]}");
    print("pi:         ${pi[0..*n]}");
}

void test_cons(n) {
    @data List = Nil | Cons(head, &tail)

    define map_cons(lst, proc) {
        case (lst) {
        | Nil() => Nil()
        | Cons(x,xs) => Cons(proc(x), map_cons(xs, proc))
	}
    }

    define map2_cons(s1, s2, proc) {
        | Cons(x,xs), Cons(y,ys), _ => Cons(proc(x,y), map2_cons(xs,ys,proc))
        | else => Nil()
    }

    define filter_cons(lst, pred) {
        case (lst) {
        | Nil() => Nil()
        | Cons(x,xs) => pred(x) ? Cons(x, filter_cons(xs, pred))
                                : filter_cons(xs, pred)
	}
    }

    define from(n) => Cons(n, from(n+1))
    define add_cons(s1, s2) => map2_cons(s1, s2, (+))
    define mul_cons(s1, s2) => map2_cons(s1, s2, (*))
    define scale(s, f) => map_cons(s, \x=>x*f)

    define integers     = from(1)
    define doubles      = Cons(1, add_cons(doubles, doubles))
    define fibs         = Cons(1, Cons(1, add_cons(fibs.tail, fibs)))
    define factorials   = Cons(1, mul_cons(from(2), factorials))
    define primes       = Cons(2, filter_cons(from(3), is_prime))

    define is_prime(n) {
        let sieve(Cons(x,xs) = primes) {
            x*x>n ? true : n%x==0 ? false : sieve(xs)
        }
    }

    define next(N,x)    => (x + N/x) / 2
    define repeat(f,a)  => Cons(a, repeat(f, f(a)))
    define sqrt(x)      => repeat(next.(x), 1.0)

    // The Pi algorithm based on Gosper's series from the paper
    // "Unbounded Spigot Algorithm for the Digits of Pi",
    // Copyright Mathematical Association of America 2005.
    // author Jeremy Gibbons <jeremy.gibbons@comlab.ox.ac.uk>.
    // http://web.comlab.ox.ac.uk/oucl/work/jeremy.gibbons/publications/spigot.pdf
    define pi =
        let g(q=1,r=180,t=60,i=2)
            let (u=3*(3*i+1)*(3*i+2), y=(q*(27*i-12)+5*r) div (5*t))
                Cons(y, g(10*q*i*(2*i-1), 10*u*(q*(5*i-2)+r-y*t), t*u, i+1))

    define to_list(s, n) {
        | _, 0 => []
        | Nil(), _ => []
        | Cons(x,xs), n => [x : to_list(xs,n-1)]
    }

    print("natural:    ${to_list(integers, n)}");
    print("doubles:    ${to_list(doubles, n)}");
    print("fibs:       ${to_list(fibs, n)}");
    print("factorials: ${to_list(factorials, n)}");
    print("primes:     ${to_list(primes, n)}");
    print("sqrt(2):    ${to_list(sqrt(2), n)}");
    print("pi:         ${to_list(pi, n)}");
}

print("----------------------------------------------------------")
print("Streams implemented by list:")
test_seq(15)

print("----------------------------------------------------------")
print("Streams implemented by algebraic data type:")
test_cons(15)
